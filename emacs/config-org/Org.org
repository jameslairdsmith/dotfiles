#+PROPERTY: header-args:emacs-lisp :results output silent
* Org mode

** Org-babel

*** Inserting new code chunks

One way to to do this would be with org-temo, but I don't use that (yet!).Instead I just use use a global key to insert Emacs Lisp chunks using the same keybinding as RStudio for R chunks in R Markdown.

Thanks to [[https://stackoverflow.com/questions/17539007/remap-org-shiftmetaright-org-shiftmetaleft-to-shift-select-metaleft-word][this answer on SO]] for showing me how to re-enable the meta-select keys. 

#+begin_src emacs-lisp
(use-package org
  ; I like my shift selections ... for now
  :init
  (setq
   org-support-shift-select "always"
   org-confirm-babel-evaluate nil
   org-startup-truncated t)
  :bind
  (:map
   org-mode-map
   ("<s-left>" . beginning-of-visual-line)
   ("<s-right>" . end-of-visual-line)
   ("s-S-<return>" . org-ctrl-c-ctrl-c)
   ; This is the same as RStudio  
   ("<M-S-left>" . nil)
   ("<M-S-right>" . nil)
   ("s-C" . comment-line))) 
;:config
; (define-key org-mode-map (kbd "<S-s-right>") nil) ; Not defined either way
; (define-key org-mode-map (kbd "<S-s-left>") nil) ; Not defined either way
;(define-key org-mode-map (kbd "<s-left>") 'beginning-of-visual-line)
;(define-key org-mode-map (kbd "<s-right>") 'end-of-visual-line)
;(define-key org-mode-map (kbd "s-S-<return>") 'org-ctrl-c-ctrl-c)
; This is the same as RStudio ^ 
;(define-key org-mode-map (kbd "<M-S-left>") nil)
;(define-key org-mode-map (kbd "<M-S-right>") nil)
;(define-key org-mode-map (kbd "s-C") 'comment-line))

(require 'org-tempo)
;  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
;  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
; (add-to-list 'org-structure-template-alist '("py" . "src python"))

(defun org-insert-el ()
  (interactive)
  (org-insert-structure-template "src emacs-lisp")
  (insert "\n")
  (previous-line))

(global-set-key (kbd "M-s-i") 'org-insert-el)
#+end_src

** Centering

#+begin_src emacs-lisp
(defun jls/org-mode-visual-fill ()
  (interactive)
  (setq
   visual-fill-column-width 100
   visual-fill-column-fringes-outside-margins nil
   ; This makes the gutter annotations appear closer ^
   visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow)
   ; This makes it so that you can still see the line wrappings from the gutter.
   visual-fill-column-center-text t)
  (visual-line-mode)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :ensure t
  :hook (org-mode . jls/org-mode-visual-fill))
#+end_src
