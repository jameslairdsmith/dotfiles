#+PROPERTY: header-args:emacs-lisp :results output silent
* Window management 

** Display buffer alist

#+begin_src 
  (setq switch-to-buffer-obey-display-actions nil)
  ;(setq switch-to-buffer-in-dedicated-window "pop")

  ; (add-to-list
  ;  'display-buffer-alist
  ;  '("\\*jls" (display-buffer-reuse-window
  ;     display-buffer-pop-up-window)))

  (add-to-list
   'display-buffer-alist
   '("\\*helpful"
     (display-buffer-in-side-window)
     (window-width . 95)
     (side . right)))

  (add-to-list
   'display-buffer-alist
   '("\\*Warnings\\*" (display-buffer-in-side-window) (side . right)))

  (add-to-list
   'display-buffer-alist
   '("\\*R"
     display-buffer-in-direction
     (direction . bottom)
     (window . root)
     (window-height . 0.3)))
#+end_src

#+begin_src emacs-lisp
(setq display-buffer-alist '())

(add-to-list
 'display-buffer-alist
 '("\\*helpful" (display-buffer-reuse-mode-window
    display-buffer-in-direction)
   (direction . right) (window-width . 95)))
#+end_src

** Global mode line

A few ideas for how to do this:
 - [[https://github.com/Bad-ptr/common-header-mode-line.el][common-header-mode-line]]
 - [[https://emacs.stackexchange.com/questions/9537/single-mode-line-for-all-windows][Answer on StackOverflow]]
 - [[https://github.com/kiennq/emacs-mini-modeline/blob/master/mini-modeline.el][mini-modeline]]
 

Below is an example of putting the calendar in the 'bottom' side window. That could be used for a
global mode line.
 
#+begin_src emacs-lisp
  (add-to-list
   'display-buffer-alist
   '("\\*modelineonly"
     (display-buffer-in-side-window)
     (side . bottom)
(window-height . 1)
     (slot . 0)))
#+end_src

** Popper

#+begin_src emacs-lisp
;  (use-package popper
;    :ensure t 
;    :bind (("C-`"   . popper-toggle-latest)
;	   ("M-`"   . popper-cycle)
;	   ("C-M-`" . popper-toggle-type))
;    :init
;    (setq popper-reference-buffers
;	  '("\\*Messages\\*"
;	    "Output\\*$"
;	    "\\*helpful"
;	    "\\*Async Shell Command\\*"
;	    help-mode
;	    compilation-mode))
;    (popper-mode +1)
;    (popper-echo-mode +1)) 
#+end_src

** Custom map

#+begin_src emacs-lisp
(defhydra
 hydra-window-nav
 (evil-normal-state-map "<backspace>")
 "A way to navigate windows"
 ("h" windmove-left "left")
 ("j" windmove-down "down")
 ("k" windmove-up "up")
 ("s" hydra-window-splits/body "splits" :exit t)
 ("d" delete-window "delete")
 ("l" windmove-right "right"))
#+end_src


Thanks to [[https://www.reddit.com/r/emacs/comments/nirg67/nesting_hydras/][this answer]] on Reddit, I worked out how to do hydra juggling.

** Splitting

We can do the splitting in a separate hydra.

Firstly might just need to define a left split. With thanks to [[https://emacs.stackexchange.com/questions/53848/c-x-3-open-a-new-buffer-to-the-left-of-the-current-buffer][this answer on SO]].

Actually, it seems the problem of left splitting is [[https://www.emacswiki.org/emacs/TransposeWindows][harder than I thought]].

#+begin_src emacs-lisp
(defun split-window-left (&optional size)
  "Like split-window-right, with selected window on the right."
  (interactive "P")
  (split-window-right size)
  (other-window 1))
#+end_src


#+begin_src emacs-lisp
(defhydra
 hydra-window-splits
 (nil nil)
 "Window splits"
 ("l" split-window-right "right")
 ("h" split-window-left "left")
 ("j" split-window-below "below"))
#+end_src


** Extra packages

Some packages that may be useful at some stage but I don't use right now.

*** Edwina

#+begin_src emacs-lisp
;(use-package edwina
;  :ensure t
;  :config (setq display-buffer-base-action '(display-buffer-below-selected))
;  ;;(edwina-setup-dwm-keys)
;  (edwina-mode 1))

;(setq display-buffer-base-action '(display-buffer-below-selected))
#+end_src

*** ace-window

This might be better if you are able to set the home row keys to be the numbers that display.

#+begin_src emacs-lisp
;(use-package ace-window)
#+end_src

*** Winnum

#+begin_src emacs-lisp
;(use-package winum
;  :config (winum-mode))
#+end_src
