#+title: JLS Emacs
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes :results output silent

* Introduction

This is my Emacs configuration. It's highly experimental.

* Dealing with Mac port

#+begin_src emacs-lisp
(setq mac-command-modifier 'super)
(setq mac-option-modifier 'meta)
#+end_src


* Quirks

Stuff I've just added for experimentation.

#+begin_src emacs-lisp
(defun open-init-el ()
  "Opens init.el file"
  (interactive)
  (find-file "~/.emacs.d/init.el"))

(defun open-Emacs-org ()
  "Opens init.org file"
  (interactive)
  (find-file "~/projects/dotfiles/emacs/Emacs.org"))
#+end_src

* Opening common files

#+begin_src emacs-lisp
(defun open-bash-profile ()
  "Opens bash_profile"
  (interactive)
  (find-file "~/.bash_profile"))

(defun open-bash-profile-org ()
  "Opens the org file I use to generate my bash_profile"
  (interactive)
  (find-file "~/projects/dotfiles/bash/bash-profile.org"))
#+end_src

#+begin_src emacs-lisp
(defun jls/symbol-value (symbol)
  (interactive "S")
  (message "%s" (symbol-value symbol)))

(defun jls/default-directory ()
  (interactive)
  (message (symbol-value 'default-directory)))
#+end_src

Trick for auto-tangling. Taken from [[https://github.com/daviwil/emacs-from-scratch/blob/9388cf6ecd9b44c430867a5c3dad5f050fdc0ee1/Emacs.org][here]].

Is there a way of forcing the save?

#+begin_src emacs-lisp
; files for auto-tangling
(setq files-for-auto-tangling
      (mapcar
       'expand-file-name
       '("~/projects/dotfiles/bash/bash-profile.org"
         "~/projects/dotfiles/emacs/Emacs.org")))

;; Automatically tangle our Emacs.org config file when we save it
(defun jls/org-babel-tangle-config ()
  (interactive)
  (when (member (buffer-file-name) files-for-auto-tangling)
    ;; We also want to transclude every time we save
    ;; ... so we get the transcluded blocks 
    (org-transclusion-add-all)
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))
  (org-transclusion-remove-all))

(add-hook 'org-mode-hook
  (lambda ()
    (add-hook 'after-save-hook
      #'jls/org-babel-tangle-config)))
#+end_src


#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((R . t) (emacs-lisp . t)))
#+end_src


* Basic keybindings

#+begin_src emacs-lisp
;(global-set-key (kbd "C-S-<return>") 'eval-buffer)
;(global-set-key (kbd "s-S-<return>") 'eval-buffer)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "s-<return>") 'eval-defun)
(global-set-key (kbd "s-c") 'ns-copy-including-secondary)
(global-set-key (kbd "s-v") 'yank) ;; Paste
(global-set-key (kbd "s-x") 'kill-region)
(global-set-key (kbd "s-p") 'execute-extended-command)
; Basically a command palette
(global-set-key (kbd "s-s") 'save-buffer)
(global-set-key (kbd "s-f") 'find-file)
#+end_src

** Keyboard escape

With thanks to this Reddit [[https://www.reddit.com/r/emacs/comments/10l40yi/how_do_i_make_esc_stop_closing_all_my_windows/][answer]] for changing the way keyboard escape quit works.

#+begin_src emacs-lisp
(defun +keyboard-escape-quit-adv (fun)
  "Around advice for `keyboard-escape-quit' FUN.
    Preserve window configuration when pressing ESC."
  (let ((buffer-quit-function (or buffer-quit-function #'ignore)))
    (funcall fun)))

(advice-add #'keyboard-escape-quit
  :around #'+keyboard-escape-quit-adv)
#+end_src

* Package infrastructure

#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
  
#+end_src

* Toolings

#+begin_src emacs-lisp
(defun jls/open-dired-local ()
  (interactive)
  (dired default-directory))

(global-set-key (kbd "s-D") 'jls/open-dired-local)
#+end_src

** Project management

This is again almost all from the Emacs from Scratch series.

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects"))
    (setq projectile-switch-project-action #'projectile-dired)))
#+end_src



Code for working out whether a folder is an R project or not.

#+begin_src emacs-lisp
(defun jls/r-proj-p (dir)
  (if (eval
       (cons
        'or
        (mapcar
         (lambda (vec) (string-match ".Rproj" vec))
         (directory-files dir))))
      t
    nil))
#+end_src


It would be interesting to see what to do with buffer local variables?

What to do when opening an R project.

An idea is to capture various trailing command arguments when starting R. Then in .RProfile, optionally incorporate them somehow. Notably, set the working directory silently. I'm not sure how RStudio does it.

#+begin_src emacs-lisp
(defun jls/open-r-project ()
  (interactive)
  (R))
#+end_src


A better solution would be to have the generic open project actions in their own function. And all the project specific actions can call that one. Classic remove duplication.

#+begin_src emacs-lisp
(defun jls/open-project ()
  (interactive)
  (cond
   ((jls/r-proj-p (projectile-project-root))
    (jls/open-r-project))
   (t
    projectile-dired)))
#+end_src

#+begin_src emacs-lisp
(setq projectile-switch-project-action 'jls/open-project)
#+end_src

#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

*** Magit

#+begin_src emacs-lisp
(defun jls/default-magit-dir (url)
  ;  (concat "~/projects/" (file-name-base url))
  "~/projects/")

(use-package magit
  :init (setq magit-clone-default-directory #'jls/default-magit-dir)
  ;:init (setq magit-clone-default-directory (defun (url) "~/projects/"))
  :custom
  (magit-display-buffer-function
   #'magit-display-buffer-same-window-except-diff-v1))


(global-set-key (kbd "s-m") 'magit-status)
#+end_src

The below is to change up the formatting of the diffs in the Magit status buffer.
I should probably have a separate theme file for that.

#+begin_src emacs-lisp
 ;   (custom-set-faces
 ;    ;`(magit-diff-added ((t :foreground ,(doom-color 'green))))
 ;    `(magit-diff-added-highlight
 ;      ((t :background ,(doom-color 'green)
;	   :foreground ,(doom-color 'blue)))
     ;`(magit-diff-added                      :foreground green :weight 'bold)
     ;`(magit-diff-added-highlight            :foreground teal :weight 'bold)
     ; `(mode-line ((t (:background ,(doom-color 'dark-violet)))))
     ; `(font-lock-comment-face ((t (:foreground ,(doom-color 'base6)))))
 ;    ))
#+end_src

** Snippets
* Evil

Just using the typical evil-collection setup for now.

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config (evil-collection-init))
#+end_src


* ESS and R

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  ;; Turn on company-mode globally:
  (add-hook 'after-init-hook
    'global-company-mode)
  ;; Only activate company in R scripts, not in R console:
  (setq ess-use-company 'script-only))

(add-hook 'ess-r-mode-hook
  '(lambda () (local-set-key (kbd "C-8") #'company-R-args)))

(setq
 company-selection-wrap-around t
 ;; Align annotations to the right tooltip border:
 company-tooltip-align-annotations t
 ;; Idle delay in seconds until completion starts automatically:
 company-idle-delay 0.45
 ;; Completion will start after typing two letters:
 company-minimum-prefix-length 2
 ;; Maximum number of candidates in the tooltip:
 company-tooltip-limit 10)

(use-package company-quickhelp
  :ensure t
  :config
  ;; Load company-quickhelp globally:
  (company-quickhelp-mode)
  ;; Time before display of documentation popup:
  (setq company-quickhelp-delay 0.3))
  
#+end_src


* PDF tooling

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t)
#+end_src

#+begin_src emacs-lisp
  ;(use-package pdf-tools
  ;  :ensure t
  ;  :config
  ;  (setenv
  ;   "PKG_CONFIG_PATH"
   ; "/usr/local/Cellar/zlib/1.2.12/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/X11/lib/pkgconfig:/usr/local/Cellar/poppler/22.06.0_1/lib/pkgconfig:/opt/x11/share/pkgconfig")
  ;  (pdf-tools-install)
  ;  (custom-set-variables '(pdf-tools-handle-upgrades t)))

  ;; https://stackoverflow.com/questions/70202413/configure-pdf-tools-in-emacs-running-on-macos
#+end_src

* Term mode

#+begin_src emacs-lisp
(use-package term
  :bind (:map term-raw-map ("s-v" . 'term-paste)))
#+end_src


* Extras

#+begin_src emacs-lisp
(use-package org-transclusion)
#+end_src

#+begin_src emacs-lisp
  ;(setq org-transclusion-exclude-elements 'property-drawer)
(setq org-transclusion-include-first-section nil)
#+end_src

In this section, I use the org-transclusion package to transclude configurations that I keep in other Org files.

Note that I will have to change my save-tangle workflow to include a transclusion element by
default.

Need to get saving correct. 

#+transclude: [[file:config-org/linting.org]]
#+transclude: [[file:config-org/final-actions.org]]
#+transclude: [[file:config-org/window-management.org]]
#+transclude: [[file:config-org/completions.org]]
#+transclude: [[file:config-org/navigation.org]]
#+transclude: [[file:config-org/R.org]]
#+transclude: [[file:config-org/display.org]]
#+transclude: [[file:config-org/tabs.org]]
#+transclude: [[file:config-org/Org.org]]
#+transclude: [[file:config-org/misc.org]]

WIP

I use two hashes to signify that I don't want this to be transcluded.

##+transclude: [[file:config-org/eaf.org][file:config-org/eaf.org]]
